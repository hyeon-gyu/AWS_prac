# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main"]

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

        ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

    - name: Create application-prod.yml
      run: |
        mkdir -p ./src/main/resources
        touch ./src/main/resources/application.yml
        echo "${{ secrets.PROPERTIES_PROD }}" > ./src/main/resources/application.yml
      shell: bash

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test
      shell: bash

    - name: Docker login
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin


    - name : Docker build & push to prod
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}
        
    - name: Deploy to prod
      uses: appleboy/ssh-action@v0.1.6
      id: deploy-prod
      env:
        COMPOSE: /home/ubuntu/docker-compose.yml
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        envs: GITHUB_SHA, COMPOSE
        script: |

          docker ps -aq | xargs -r docker rm -f
          docker-compose -f $COMPOSE down || true
          docker pull ${{ secrets.DOCKER_REPO }}  
        
          docker-compose -f $COMPOSE up -d
          docker image prune -f